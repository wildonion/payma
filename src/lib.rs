
/*


    >>>>>>>> u8 bytes -> &str using str::from_utf8()
    >>>>>>>> &str -> u8 bytes using as_bytes() or as_bytes_mut()
    >>>>>>>> u8 -> u16 using transmute or shift bits operations (shift 2 bytes) or u8 to hex ascii string then to u16 using self::from_hex_string_to_u16() function
    >>>>>>>> u8 -> hex ascii string using self::from_u8_to_hex_string() function
    >>>>>>>> hex ascii string to u8 or u16 using from_str_radix()
    >>>>>>>> u8 -> hex ascii vector using :x? in println! macro or dividing operations : u8 bytes % 16 



    malware in rust using ram concepts (static and const are in segment data and let is on the stack)
    injectable code like .so and .dll
    hardware coding, 
    memory layout and offset, 
    playing with byte, hex and pointers
    unsafe coding
    writing engines
    convert this contract into a wasm module to be loadable inside js
    lle (hex editor, bytes, seeds, xor, nor, &, |, include!, liefetime, 
        generic, bytes, hex, base64, raw parts, &mut pointer, unpin 
        and box, phantomdata) 
    binding using .so and bpf .elf and https://crates.io/crates/pyo3


    zero copy      ::::: https://github.com/wildonion/uniXerr/blob/a30a9f02b02ec7980e03eb8e31049890930d9238/infra/valhalla/coiniXerr/src/schemas.rs#L1621C6-L1621C6
    data collision ::::: https://github.com/wildonion/uniXerr/blob/a30a9f02b02ec7980e03eb8e31049890930d9238/infra/valhalla/coiniXerr/src/utils.rs#L640
    
    https://crates.io/crates/pyo3
    https://crates.io/crates/wasmtime
    https://wasmer.io/
    https://github.com/skerkour/black-hat-rust/tree/main/ch_11
    https://cryptobook.nakov.com/digital-signatures
    https://github.com/wildonion/cs-concepts

    ------
    TASK-1
    ------
    encrypt the whole os using ring based on PGP keypairs
    we can decrypt it with private key only and the victim
    must pay for the private key
    ...

    ------
    TASK 2
    ------
    sha256 of the file must be equals to the one generated by the server to verify the file signature
    software and code update and data encryption using PGP cert keys and ed25519 public key digital signature
    symmetric single private key for en(de)cryption
    asymmetric ed25519 digital signature key 
    --- has of public key which is wallet
    --- private key can be used to sign tx
    --- seed phrase can be used to generate the keypairs 
    --- public key can be used to verify the signature agains the utf8 bytes of data
    ...

    ------
    TASK 3
    ------
    smart contract to pay developer salary based on github commits using escrow contract
    1 - generate keypair for both parties
    2 - employee deposit the full payment into this contract 
    3 - the whole moeny will be mapped to the contractor in this contract
    4 - on every 10 commits, confirmed by the employee full/10 will be transferred to the contractor
    5 - we run step 4 inside a loop{} until all the moeny gets paid to the contractor
    

*/